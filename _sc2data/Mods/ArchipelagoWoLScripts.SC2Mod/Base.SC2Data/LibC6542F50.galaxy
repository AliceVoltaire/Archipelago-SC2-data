include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

include "LibC6542F50_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libC6542F50_InitLibraries () {
    libNtve_InitVariables();
    libCamp_InitVariables();
}

// Variable Initialization
bool libC6542F50_InitVariables_completed = false;

void libC6542F50_InitVariables () {
    if (libC6542F50_InitVariables_completed) {
        return;
    }

    libC6542F50_InitVariables_completed = true;

    libC6542F50_gv_rainbowCyclePeriod = 0.5;
}

// Functions
int libC6542F50_gf_APSetDifficulty (string lp_difficultyChar, unitgroup lp_casualRemoval, unitgroup lp_normalRemoval, unitgroup lp_hardRemoval, unitgroup lp_brutalRemoval) {
    // Automatic Variable Declarations
    unitgroup auto5432C9C4_g;
    int auto5432C9C4_u;
    unit auto5432C9C4_var;
    unitgroup auto4BD863FF_g;
    int auto4BD863FF_u;
    unit auto4BD863FF_var;
    unitgroup auto61EC3F5F_g;
    int auto61EC3F5F_u;
    unit auto61EC3F5F_var;
    unitgroup auto41CE8471_g;
    int auto41CE8471_u;
    unit auto41CE8471_var;

    // Implementation
    if ((lp_difficultyChar == "C")) {
        GameSetSpeedValue(c_gameSpeedNormal);
        auto5432C9C4_g = lp_casualRemoval;
        auto5432C9C4_u = UnitGroupCount(auto5432C9C4_g, c_unitCountAll);
        for (;; auto5432C9C4_u -= 1) {
            auto5432C9C4_var = UnitGroupUnitFromEnd(auto5432C9C4_g, auto5432C9C4_u);
            if (auto5432C9C4_var == null) { break; }
            UnitRemove(auto5432C9C4_var);
        }
        return 1;
    }
    else {
        if ((lp_difficultyChar == "N")) {
            GameSetSpeedValue(c_gameSpeedNormal);
            auto4BD863FF_g = lp_normalRemoval;
            auto4BD863FF_u = UnitGroupCount(auto4BD863FF_g, c_unitCountAll);
            for (;; auto4BD863FF_u -= 1) {
                auto4BD863FF_var = UnitGroupUnitFromEnd(auto4BD863FF_g, auto4BD863FF_u);
                if (auto4BD863FF_var == null) { break; }
                UnitRemove(auto4BD863FF_var);
            }
            return 2;
        }
        else {
            if ((lp_difficultyChar == "H")) {
                GameSetSpeedValue(c_gameSpeedFast);
                auto61EC3F5F_g = lp_hardRemoval;
                auto61EC3F5F_u = UnitGroupCount(auto61EC3F5F_g, c_unitCountAll);
                for (;; auto61EC3F5F_u -= 1) {
                    auto61EC3F5F_var = UnitGroupUnitFromEnd(auto61EC3F5F_g, auto61EC3F5F_u);
                    if (auto61EC3F5F_var == null) { break; }
                    UnitRemove(auto61EC3F5F_var);
                }
                return 3;
            }
            else {
                if ((lp_difficultyChar == "B")) {
                    GameSetSpeedValue(c_gameSpeedFaster);
                    auto41CE8471_g = lp_brutalRemoval;
                    auto41CE8471_u = UnitGroupCount(auto41CE8471_g, c_unitCountAll);
                    for (;; auto41CE8471_u -= 1) {
                        auto41CE8471_var = UnitGroupUnitFromEnd(auto41CE8471_g, auto41CE8471_u);
                        if (auto41CE8471_var == null) { break; }
                        UnitRemove(auto41CE8471_var);
                    }
                    return 4;
                }
                else {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/lib_C6542F50_3EC36D28") + StringToText(lp_difficultyChar)));
                    return 1;
                }
            }
        }
    }
    return 1;
}

void libC6542F50_gf_APUnlockUnits (string lp_unitCode, string lp_version) {
    // Variable Declarations
    int lv_versionNumber;
    int lv_unitCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_versionNumber = StringToInt(lp_version);
    lv_unitCode = StringToInt(lp_unitCode);

    // Implementation
    if ((ModI(lv_unitCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarine, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMedic, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryFirebat, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryMarauder, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupInfantryReaper, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesHellion, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesVulture, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesGoliath, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (8 + 1))) >= PowI(2.0, 8.0))) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesDiamondback, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (9 + 1))) >= PowI(2.0, 9.0))) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupVehiclesSiegeTank, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (10 + 1))) >= PowI(2.0, 10.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "Starport", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsMedivac, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (11 + 1))) >= PowI(2.0, 11.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "Starport", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsWrath, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (12 + 1))) >= PowI(2.0, 12.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "Starport", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsViking, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (13 + 1))) >= PowI(2.0, 13.0))) {
        TechTreeUnitAllow(1, "StarportTechLab", true);
        TechTreeUnitAllow(1, "Starport", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBanshee, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (14 + 1))) >= PowI(2.0, 14.0))) {
        TechTreeUnitAllow(1, "StarportTechLab", true);
        TechTreeUnitAllow(1, "FusionCore", true);
        TechTreeUnitAllow(1, "Starport", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupStarshipsBattlecruiser, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (15 + 1))) >= PowI(2.0, 15.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupDominionGhost, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (16 + 1))) >= PowI(2.0, 16.0))) {
        TechTreeUnitAllow(1, "BarracksTechLab", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupDominionSpectre, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (17 + 1))) >= PowI(2.0, 17.0))) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupDominionThor, 1);
    }

    if ((ModI(lv_unitCode, PowI(2.0, (18 + 1))) >= PowI(2.0, 18.0))) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "StarportReactor", true);
        TechTreeUnitAllow(1, "Liberator", true);
    }

    if ((ModI(lv_unitCode, 1048576) >= 524288)) {
        TechTreeUnitAllow(1, "StarportTechLab", true);
        TechTreeUnitAllow(1, "Starport", true);
        TechTreeUnitAllow(1, "ValkyrieSCBW", true);
    }

    if ((ModI(lv_unitCode, 2097152) >= 1048576)) {
        libCamp_gf_EnableCampaignTechUnit(true, libCamp_ge_StoryTechGroup_StoryTechGroupxxxReactor, 1);
        TechTreeUnitAllow(1, "Reactor", true);
        TechTreeUnitAllow(1, "FactoryReactor", true);
        TechTreeUnitAllow(1, "Factory", true);
        TechTreeUnitAllow(1, "WidowMine", true);
    }

    if ((ModI(lv_unitCode, 4194304) >= 2097152)) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        TechTreeUnitAllow(1, "Cyclone", true);
    }

}

void libC6542F50_gf_APUnlockUpgrades (string lp_upgradeCode, string lp_version) {
    // Variable Declarations
    int lv_upgradeCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgradeCode = StringToInt(lp_upgradeCode);

    // Implementation
    if ((ModI(lv_upgradeCode, 4) >= 1)) {
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel1", true);
        TechTreeUnitAllow(1, "EngineeringBay", true);
        if ((ModI(lv_upgradeCode, 4) >= 2)) {
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel2", true);
            if ((ModI(lv_upgradeCode, 4) >= 3)) {
                TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranInfantryWeaponsUltraCapacitorsLevel3", false);
    }
    if ((ModI(lv_upgradeCode, 16) >= 4)) {
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel1", true);
        TechTreeUnitAllow(1, "EngineeringBay", true);
        if ((ModI(lv_upgradeCode, 16) >= 8)) {
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel2", true);
            if ((ModI(lv_upgradeCode, 16) >= 12)) {
                TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel2", false);
            TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel1", false);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel2", false);
        TechTreeUpgradeAllow(1, "TerranInfantryArmorsVanadiumPlatingLevel3", false);
    }
    if ((ModI(lv_upgradeCode, 64) >= 16)) {
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel1", true);
        TechTreeUnitAllow(1, "Armory", true);
        if ((ModI(lv_upgradeCode, 64) >= 32)) {
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel2", true);
            if ((ModI(lv_upgradeCode, 64) >= 48)) {
                TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranVehicleWeaponsUltraCapacitorsLevel3", false);
    }
    if ((ModI(lv_upgradeCode, 256) >= 64)) {
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel1", true);
        TechTreeUnitAllow(1, "Armory", true);
        if ((ModI(lv_upgradeCode, 256) >= 128)) {
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel2", true);
            if ((ModI(lv_upgradeCode, 256) >= 192)) {
                TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel2", false);
            TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel1", false);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel2", false);
        TechTreeUpgradeAllow(1, "TerranVehicleArmorsVanadiumPlatingLevel3", false);
    }
    if ((ModI(lv_upgradeCode, 1024) >= 256)) {
        TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel1", true);
        TechTreeUnitAllow(1, "Armory", true);
        if ((ModI(lv_upgradeCode, 1024) >= 512)) {
            TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel2", true);
            if ((ModI(lv_upgradeCode, 1024) >= 768)) {
                TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranShipWeaponsUltraCapacitorsLevel3", false);
    }
    if ((ModI(lv_upgradeCode, 4096) >= 1024)) {
        TechTreeUpgradeAllow(1, "TerranShipArmorsLevel1", true);
        TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel1", true);
        TechTreeUnitAllow(1, "Armory", true);
        if ((ModI(lv_upgradeCode, 4096) >= 2048)) {
            TechTreeUpgradeAllow(1, "TerranShipArmorsLevel2", true);
            TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel2", true);
            if ((ModI(lv_upgradeCode, 4096) >= 3072)) {
                TechTreeUpgradeAllow(1, "TerranShipArmorsLevel3", true);
                TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel3", true);
            }
            else {
                TechTreeUpgradeAllow(1, "TerranShipArmorsLevel3", false);
                TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel3", false);
            }
        }
        else {
            TechTreeUpgradeAllow(1, "TerranShipArmorsLevel2", false);
            TechTreeUpgradeAllow(1, "TerranShipArmorsLevel3", false);
            TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel2", false);
            TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel3", false);
        }
    }
    else {
        TechTreeUpgradeAllow(1, "TerranShipArmorsLevel1", false);
        TechTreeUpgradeAllow(1, "TerranShipArmorsLevel2", false);
        TechTreeUpgradeAllow(1, "TerranShipArmorsLevel3", false);
        TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel1", false);
        TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel2", false);
        TechTreeUpgradeAllow(1, "TerranShipArmorsVanadiumPlatingLevel3", false);
    }
}

void libC6542F50_gf_APUnlockArmory1 (string lp_unitUpgradeCode, string lp_version) {
    // Variable Declarations
    int lv_unitUpgradeCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitUpgradeCode = StringToInt(lp_unitUpgradeCode);

    // Implementation
    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        TechTreeUpgradeAddLevel(1, "ProjectileAccelerators", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUpgradeAddLevel(1, "NeoSteelFrame", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUpgradeAddLevel(1, "ReinforcedSuperstructure", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUpgradeAddLevel(1, "HailstormMissilePods", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUpgradeAddLevel(1, "AdvancedConstruction", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        TechTreeUpgradeAddLevel(1, "DualFusionWelders", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        TechTreeUpgradeAddLevel(1, "FireSuppressionSystems", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUpgradeAddLevel(1, "OrbitalRelay", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (8 + 1))) >= PowI(2.0, 8.0))) {
        TechTreeUpgradeAddLevel(1, "MarineStimpack", 1);
        TechTreeAbilityAllow(1, AbilityCommand("Stimpack", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (9 + 1))) >= PowI(2.0, 9.0))) {
        TechTreeUpgradeAddLevel(1, "CombatShield", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (10 + 1))) >= PowI(2.0, 10.0))) {
        TechTreeUpgradeAddLevel(1, "AdvancedMedicTraining", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (11 + 1))) >= PowI(2.0, 11.0))) {
        TechTreeUpgradeAddLevel(1, "StabilizerMedPacks", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (12 + 1))) >= PowI(2.0, 12.0))) {
        TechTreeUpgradeAddLevel(1, "BearclawNozzles", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (13 + 1))) >= PowI(2.0, 13.0))) {
        TechTreeUpgradeAddLevel(1, "FirebatJuggernautPlating", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (14 + 1))) >= PowI(2.0, 14.0))) {
        TechTreeUpgradeAddLevel(1, "JackhammerConcussionGrenades", 1);
        TechTreeUpgradeAddLevel(1, "PunisherGrenades", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (15 + 1))) >= PowI(2.0, 15.0))) {
        TechTreeUpgradeAddLevel(1, "MarauderLifeBoost", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (16 + 1))) >= PowI(2.0, 16.0))) {
        TechTreeUpgradeAddLevel(1, "ReaperU238Rounds", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (17 + 1))) >= PowI(2.0, 17.0))) {
        TechTreeUpgradeAddLevel(1, "ClusterBomb", 1);
        TechTreeAbilityAllow(1, AbilityCommand("D8Charge", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (18 + 1))) >= PowI(2.0, 18.0))) {
        TechTreeUpgradeAddLevel(1, "CycloneLockOnDamageUpgrade", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 1048576) >= 524288)) {
        TechTreeUpgradeAddLevel(1, "MagFieldLaunchers", 1);
    }

}

void libC6542F50_gf_APUnlockArmory2 (string lp_unitUpgradeCode, string lp_version) {
    // Variable Declarations
    int lv_unitUpgradeCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitUpgradeCode = StringToInt(lp_unitUpgradeCode);

    // Implementation
    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        TechTreeUpgradeAddLevel(1, "TwinLinkedFlameThrowers", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUpgradeAddLevel(1, "HellionCampaignInfernalPreIgniter", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUpgradeAddLevel(1, "CerberusMines", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUpgradeAddLevel(1, "NanoConstructor", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUpgradeAddLevel(1, "MultilockTargetingSystems", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        TechTreeUpgradeAddLevel(1, "AresClassWeaponsSystem", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        TechTreeUpgradeAddLevel(1, "TriLithiumPowerCells", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUpgradeAddLevel(1, "ShapedHull", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (8 + 1))) >= PowI(2.0, 8.0))) {
        TechTreeUpgradeAddLevel(1, "MaelstromRounds", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (9 + 1))) >= PowI(2.0, 9.0))) {
        TechTreeUpgradeAddLevel(1, "SiegeTankShapedBlast", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (10 + 1))) >= PowI(2.0, 10.0))) {
        TechTreeUpgradeAddLevel(1, "MedivacRapidDeployment", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (11 + 1))) >= PowI(2.0, 11.0))) {
        TechTreeUpgradeAddLevel(1, "AdvancedHealingAI", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (12 + 1))) >= PowI(2.0, 12.0))) {
        TechTreeUpgradeAddLevel(1, "DynamicPowerRouting", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (13 + 1))) >= PowI(2.0, 13.0))) {
        TechTreeUpgradeAddLevel(1, "CloakDistortionField", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (14 + 1))) >= PowI(2.0, 14.0))) {
        TechTreeUpgradeAddLevel(1, "HALORockets", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (15 + 1))) >= PowI(2.0, 15.0))) {
        TechTreeUpgradeAddLevel(1, "AresClassWeaponsSystemViking", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (16 + 1))) >= PowI(2.0, 16.0))) {
        TechTreeUpgradeAddLevel(1, "CrossSpectrumDampeners", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (17 + 1))) >= PowI(2.0, 17.0))) {
        TechTreeUpgradeAddLevel(1, "ClusterWarheads", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (18 + 1))) >= PowI(2.0, 18.0))) {
        TechTreeUpgradeAddLevel(1, "HurricaneMissiles", 1);
        TechTreeAbilityAllow(1, AbilityCommand("MissilePods", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, 1048576) >= 524288)) {
        TechTreeUpgradeAddLevel(1, "DefensiveMatrix", 1);
        TechTreeAbilityAllow(1, AbilityCommand("DefensiveMatrix", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, 2097152) >= 1048576)) {
        TechTreeUpgradeAddLevel(1, "OcularImplants", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 4194304) >= 2097152)) {
        TechTreeUpgradeAddLevel(1, "PermanentCloakGhost", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 8388608) >= 4194304)) {
        TechTreeUpgradeAddLevel(1, "UltrasonicPulse", 1);
        TechTreeAbilityAllow(1, AbilityCommand("Obliterate", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, 16777216) >= 8388608)) {
        TechTreeUpgradeAddLevel(1, "PermanentCloakSpectre", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 33554432) >= 16777216)) {
        TechTreeUpgradeAddLevel(1, "330mmBarrageCannons", 1);
        TechTreeAbilityAllow(1, AbilityCommand("330mmBarrageCannons", 0), true);
    }

    if ((ModI(lv_unitUpgradeCode, 67108864) >= 33554432)) {
        TechTreeUpgradeAddLevel(1, "MechanicalRebirth", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 134217728) >= 67108864)) {
        TechTreeUpgradeAddLevel(1, "LiberatorAGRangeUpgrade", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 268435456) >= 134217728)) {
        TechTreeUpgradeAddLevel(1, "LiberatorSiegeProtocol", 1);
    }

    if ((ModI(lv_unitUpgradeCode, 536870912) >= 268435456)) {
        TechTreeUpgradeAddLevel(1, "DrillClaws", 1);
    }

    if ((ModI(lv_unitUpgradeCode, (1073741824)) >= 536870912)) {
        TechTreeUpgradeAddLevel(1, "ImprovedConcealment", 1);
    }

}

void libC6542F50_gf_APUnlockBuildings (string lp_buildingCode, string lp_version) {
    // Variable Declarations
    int lv_buildingCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buildingCode = StringToInt(lp_buildingCode);

    // Implementation
    if ((ModI(lv_buildingCode, 2) >= 1)) {
        TechTreeUnitAllow(1, "Bunker", true);
        TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 22), true);
    }
    else {
        TechTreeAbilityAllow(1, AbilityCommand("TerranBuild", 22), false);
    }
    if ((ModI(lv_buildingCode, 4) >= 2)) {
        TechTreeUnitAllow(1, "EngineeringBay", true);
        TechTreeUnitAllow(1, "MissileTurret", true);
    }

    if ((ModI(lv_buildingCode, 8) >= 4)) {
        TechTreeUnitAllow(1, "EngineeringBay", true);
        TechTreeUnitAllow(1, "SensorTower", true);
    }

    if ((ModI(lv_buildingCode, 8) >= 4)) {
        TechTreeUnitAllow(1, "EngineeringBay", true);
        TechTreeUnitAllow(1, "SensorTower", true);
    }

    if ((ModI(lv_buildingCode, 8) >= 4)) {
        TechTreeUnitAllow(1, "EngineeringBay", true);
        TechTreeUnitAllow(1, "SensorTower", true);
    }

}

void libC6542F50_gf_APUnlockMercenaries (string lp_mercCode, string lp_version) {
    // Variable Declarations
    int lv_mercCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mercCode = StringToInt(lp_mercCode);

    // Implementation
    if ((ModI(lv_mercCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "WarPig", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "DevilDog", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "HammerSecurity", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "SpartanCompany", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "SiegeBreaker", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "HelsAngelFighter", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "DuskWing", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUnitAllow(1, "MercCompound", true);
        TechTreeUnitAllow(1, "DukesRevenge", true);
    }

}

void libC6542F50_gf_APUnlockLaboratory (string lp_unitUpgradeCode, string lp_version) {
    // Variable Declarations
    int lv_unitUpgradeCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitUpgradeCode = StringToInt(lp_unitUpgradeCode);

    // Implementation
    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        TechTreeUpgradeAddLevel(1, "UltraCapacitors", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUpgradeAddLevel(1, "VanadiumPlating", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUpgradeAddLevel(1, "SupplyDepotDrop", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUpgradeAddLevel(1, "MicroFiltering", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUpgradeAddLevel(1, "AutoHarvester", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        TechTreeUpgradeAddLevel(1, "CommandCenterReactor", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        TechTreeUnitAllow(1, "Raven", true);
        TechTreeUnitAllow(1, "StarportTechLab", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUnitAllow(1, "ScienceVessel", true);
        TechTreeUnitAllow(1, "StarportTechLab", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (8 + 1))) >= PowI(2.0, 8.0))) {
        TechTreeUpgradeAddLevel(1, "TechReactor", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (9 + 1))) >= PowI(2.0, 9.0))) {
        TechTreeUpgradeAddLevel(1, "OrbitalStrike", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (10 + 1))) >= PowI(2.0, 10.0))) {
        TechTreeUpgradeAddLevel(1, "ShrikeTurret", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (11 + 1))) >= PowI(2.0, 11.0))) {
        TechTreeUpgradeAddLevel(1, "FortifiedBunkerCarapace", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (12 + 1))) >= PowI(2.0, 12.0))) {
        TechTreeUnitAllow(1, "PlanetaryFortress", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (13 + 1))) >= PowI(2.0, 13.0))) {
        TechTreeUnitAllow(1, "EngineeringBay", true);
        TechTreeUnitAllow(1, "PerditionTurretUnderground", true);
        TechTreeUnitAllow(1, "PerditionTurret", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (14 + 1))) >= PowI(2.0, 14.0))) {
        TechTreeUnitAllow(1, "FactoryTechLab", true);
        TechTreeUnitAllow(1, "Factory", true);
        TechTreeUnitAllow(1, "Predator", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (15 + 1))) >= PowI(2.0, 15.0))) {
        TechTreeUnitAllow(1, "StarportTechLab", true);
        TechTreeUnitAllow(1, "Starport", true);
        TechTreeUnitAllow(1, "Hercules", true);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (16 + 1))) >= PowI(2.0, 16.0))) {
        TechTreeUpgradeAddLevel(1, "CellularReactors", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (17 + 1))) >= PowI(2.0, 17.0))) {
        TechTreeUpgradeAddLevel(1, "RegenerativeBioSteel", 1);
    }

    if ((ModI(lv_unitUpgradeCode, PowI(2.0, (18 + 1))) >= PowI(2.0, 18.0))) {
        TechTreeUpgradeAddLevel(1, "HiveMindEmulator", 1);
        TechTreeUnitAllow(1, "EngineeringBay", true);
    }

    if ((ModI(lv_unitUpgradeCode, 1048576) >= 524288)) {
        TechTreeUpgradeAddLevel(1, "PsiDisruptor", 1);
        TechTreeUnitAllow(1, "EngineeringBay", true);
    }

}

void libC6542F50_gf_APUnlockProtoss (string lp_mercCode, string lp_version) {
    // Variable Declarations
    int lv_mercCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mercCode = StringToInt(lp_mercCode);

    // Implementation
    if ((ModI(lv_mercCode, PowI(2.0, (0 + 1))) >= PowI(2.0, 0.0))) {
        TechTreeUnitAllow(1, "Zealot", true);
        TechTreeUpgradeAddLevel(1, "Charge", 1);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (1 + 1))) >= PowI(2.0, 1.0))) {
        TechTreeUnitAllow(1, "Stalker", true);
        TechTreeUnitAllow(1, "CyberneticsCore", true);
        TechTreeUpgradeAddLevel(1, "BlinkTech", 1);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (2 + 1))) >= PowI(2.0, 2.0))) {
        TechTreeUnitAllow(1, "TemplarArchive", true);
        TechTreeUnitAllow(1, "HighTemplar", true);
        TechTreeUpgradeAddLevel(1, "PsiStormTech", 1);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (3 + 1))) >= PowI(2.0, 3.0))) {
        TechTreeUnitAllow(1, "DarkTemplar", true);
        TechTreeUnitAllow(1, "TemplarArchive", true);
        TechTreeUnitAllow(1, "DarkShrine", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (4 + 1))) >= PowI(2.0, 4.0))) {
        TechTreeUnitAllow(1, "RoboticsFacility", true);
        TechTreeUnitAllow(1, "Immortal", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (5 + 1))) >= PowI(2.0, 5.0))) {
        TechTreeUnitAllow(1, "RoboticsBay", true);
        TechTreeUnitAllow(1, "RoboticsFacility", true);
        TechTreeUnitAllow(1, "Colossus", true);
        TechTreeUpgradeAddLevel(1, "ExtendedThermalLance", 1);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (6 + 1))) >= PowI(2.0, 6.0))) {
        TechTreeUnitAllow(1, "Stargate", true);
        TechTreeUnitAllow(1, "Phoenix", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (7 + 1))) >= PowI(2.0, 7.0))) {
        TechTreeUnitAllow(1, "Stargate", true);
        TechTreeUnitAllow(1, "VoidRay", true);
    }

    if ((ModI(lv_mercCode, PowI(2.0, (8 + 1))) >= PowI(2.0, 8.0))) {
        TechTreeUnitAllow(1, "Stargate", true);
        TechTreeUnitAllow(1, "FleetBeacon", true);
        TechTreeUnitAllow(1, "Carrier", true);
    }

}

void libC6542F50_gf_GiveMineralsAndVespene (int lp_minerals, int lp_vespene, string lp_version) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
}

void libC6542F50_gf_APArchipelagoSendData (int lp_bit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libC6542F50_gv_aPInitFinished == true)) {
        UnitSetPropertyFixed(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, (UnitGetPropertyInt(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent) - PowI(2.0, lp_bit)));
        libC6542F50_gv_aPArchDataValue = (libC6542F50_gv_aPArchDataValue + PowI(2.0, lp_bit));
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: AP Clear Chat
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APClearChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaChat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APClearChat_Init () {
    libC6542F50_gt_APClearChat = TriggerCreate("libC6542F50_gt_APClearChat_Func");
    TriggerAddEventChatMessage(libC6542F50_gt_APClearChat, c_playerAny, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Archipelago Tech Update
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APArchipelagoTechUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libC6542F50_gf_APUnlockUnits(StringWord(EventChatMessage(false), 2), "");
    libC6542F50_gf_APUnlockUpgrades(StringWord(EventChatMessage(false), 3), "");
    libC6542F50_gf_APUnlockArmory1(StringWord(EventChatMessage(false), 4), "");
    libC6542F50_gf_APUnlockArmory2(StringWord(EventChatMessage(false), 5), "");
    libC6542F50_gf_APUnlockBuildings(StringWord(EventChatMessage(false), 6), "");
    libC6542F50_gf_APUnlockMercenaries(StringWord(EventChatMessage(false), 7), "");
    libC6542F50_gf_APUnlockLaboratory(StringWord(EventChatMessage(false), 8), "");
    libC6542F50_gf_APUnlockProtoss(StringWord(EventChatMessage(false), 9), "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APArchipelagoTechUpdate_Init () {
    libC6542F50_gt_APArchipelagoTechUpdate = TriggerCreate("libC6542F50_gt_APArchipelagoTechUpdate_Func");
    TriggerAddEventChatMessage(libC6542F50_gt_APArchipelagoTechUpdate, c_playerAny, "UpdateTech", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Archipelago Color Update
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APArchipelagoColorUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto3429BB79_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3429BB79_val = StringWord(EventChatMessage(false), 2);
    if (auto3429BB79_val == "16") {
        TriggerExecute(libC6542F50_gt_APRainbowCycle, true, false);
    }
    else if (auto3429BB79_val == "15") {
        PlayerSetColorIndex(1, 15, true);
    }
    else if (auto3429BB79_val == "14") {
        PlayerSetColorIndex(1, 14, true);
    }
    else if (auto3429BB79_val == "13") {
        PlayerSetColorIndex(1, 13, true);
    }
    else if (auto3429BB79_val == "12") {
        PlayerSetColorIndex(1, 12, true);
    }
    else if (auto3429BB79_val == "11") {
        PlayerSetColorIndex(1, 11, true);
    }
    else if (auto3429BB79_val == "10") {
        PlayerSetColorIndex(1, 10, true);
    }
    else if (auto3429BB79_val == "9") {
        PlayerSetColorIndex(1, 9, true);
    }
    else if (auto3429BB79_val == "8") {
        PlayerSetColorIndex(1, 8, true);
    }
    else if (auto3429BB79_val == "7") {
        PlayerSetColorIndex(1, 7, true);
    }
    else if (auto3429BB79_val == "6") {
        PlayerSetColorIndex(1, 6, true);
    }
    else if (auto3429BB79_val == "5") {
        PlayerSetColorIndex(1, 5, true);
    }
    else if (auto3429BB79_val == "4") {
        PlayerSetColorIndex(1, 4, true);
    }
    else if (auto3429BB79_val == "3") {
        PlayerSetColorIndex(1, 3, true);
    }
    else if (auto3429BB79_val == "2") {
        PlayerSetColorIndex(1, 2, true);
    }
    else if (auto3429BB79_val == "1") {
        PlayerSetColorIndex(1, 1, true);
    }
    else if (auto3429BB79_val == "0") {
        PlayerSetColorIndex(1, 0, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APArchipelagoColorUpdate_Init () {
    libC6542F50_gt_APArchipelagoColorUpdate = TriggerCreate("libC6542F50_gt_APArchipelagoColorUpdate_Func");
    TriggerAddEventChatMessage(libC6542F50_gt_APArchipelagoColorUpdate, c_playerAny, "SetColor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Rainbow Cycle
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APRainbowCycle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetColorIndex(1, 1, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 6, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 5, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 7, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 3, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 2, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    PlayerSetColorIndex(1, 4, true);
    Wait(libC6542F50_gv_rainbowCyclePeriod, c_timeReal);
    TriggerExecute(libC6542F50_gt_APRainbowCycle, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APRainbowCycle_Init () {
    libC6542F50_gt_APRainbowCycle = TriggerCreate("libC6542F50_gt_APRainbowCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Clear Tech
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APClearTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUnitAllow(1, "WarPig", false);
    TechTreeUnitAllow(1, "DevilDog", false);
    TechTreeUnitAllow(1, "HammerSecurity", false);
    TechTreeUnitAllow(1, "SpartanCompany", false);
    TechTreeUnitAllow(1, "SiegeBreakerSieged", false);
    TechTreeUnitAllow(1, "HelsAngelFighter", false);
    TechTreeUnitAllow(1, "DuskWing", false);
    TechTreeUnitAllow(1, "DukesRevenge", false);
    TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranInfantryArmorsLevel3", false);
    TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranInfantryWeaponsLevel3", false);
    TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranVehicleArmorsLevel3", false);
    TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranVehicleWeaponsLevel3", false);
    TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranShipWeaponsLevel3", false);
    TechTreeUpgradeAllow(1, "TerranShipArmorsLevel1", false);
    TechTreeUpgradeAllow(1, "TerranShipArmorsLevel2", false);
    TechTreeUpgradeAllow(1, "TerranShipArmorsLevel3", false);
    TechTreeUnitAllow(1, "Zealot", false);
    TechTreeUnitAllow(1, "Stalker", false);
    TechTreeUnitAllow(1, "TemplarArchive", false);
    TechTreeUnitAllow(1, "DarkTemplar", false);
    TechTreeUnitAllow(1, "Immortal", false);
    TechTreeUnitAllow(1, "Colossus", false);
    TechTreeUnitAllow(1, "Phoenix", false);
    TechTreeUnitAllow(1, "VoidRay", false);
    TechTreeUnitAllow(1, "Carrier", false);
    TechTreeUnitAllow(1, "Liberator", false);
    TechTreeUnitAllow(1, "ValkyrieSCBW", false);
    TechTreeUpgradeAllow(1, "LiberatorAGRangeUpgrade", false);
    TechTreeUpgradeAllow(1, "LiberatorSiegeProtocol", false);
    TechTreeUnitAllow(1, "WidowMine", false);
    TechTreeUpgradeAllow(1, "DrillClaws", false);
    TechTreeUpgradeAllow(1, "ImprovedConcealment", false);
    TechTreeUnitAllow(1, "Cyclone", false);
    TechTreeUpgradeAllow(1, "CycloneLockOnDamageUpgrade", false);
    TechTreeUpgradeAllow(1, "MagFieldLaunchers", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APClearTech_Init () {
    libC6542F50_gt_APClearTech = TriggerCreate("libC6542F50_gt_APClearTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Health Check
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_HealthCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(UnitGetPropertyInt(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, UnitTypeGetName(UnitTypeFromString("Archipelago")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_HealthCheck_Init () {
    libC6542F50_gt_HealthCheck = TriggerCreate("libC6542F50_gt_HealthCheck_Func");
    TriggerAddEventChatMessage(libC6542F50_gt_HealthCheck, c_playerAny, "health", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Dont Hide Archipelago
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APDontHideArchipelago_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitIsHidden(libC6542F50_gv_aPArchipelagoCommunicate) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(libC6542F50_gv_aPArchipelagoCommunicate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APDontHideArchipelago_Init () {
    libC6542F50_gt_APDontHideArchipelago = TriggerCreate("libC6542F50_gt_APDontHideArchipelago_Func");
    TriggerAddEventTimePeriodic(libC6542F50_gt_APDontHideArchipelago, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Set Init Finished
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APSetInitFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libC6542F50_gv_aPInitFinished = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APSetInitFinished_Init () {
    libC6542F50_gt_APSetInitFinished = TriggerCreate("libC6542F50_gt_APSetInitFinished_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP Pre Init Map
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_APPreInitMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUnitCount(1, "CampaignRead", c_techCountQueuedOrBetter) < 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString("Archipelago"), c_unitCreateIgnorePlacement, 1, Point(0.0, 0.0));
    }

    libC6542F50_gv_aPArchipelagoCommunicate = UnitGroupUnit(UnitGroup("CampaignRead", 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_APPreInitMap_Init () {
    libC6542F50_gt_APPreInitMap = TriggerCreate("libC6542F50_gt_APPreInitMap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Mismatch
//--------------------------------------------------------------------------------------------------
bool libC6542F50_gt_DataMismatch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libC6542F50_gv_aPArchipelagoCommunicate) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitTypeFromString("Archipelago"), c_unitCreateIgnorePlacement, 1, Point(0.0, 0.0));
        libC6542F50_gv_aPArchipelagoCommunicate = UnitLastCreated();
    }
    else {
        if (((UnitGetPropertyInt(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropNormal) - UnitGetPropertyInt(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropCurrent)) != libC6542F50_gv_aPArchDataValue)) {
            UnitSetPropertyFixed(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, (UnitGetPropertyInt(libC6542F50_gv_aPArchipelagoCommunicate, c_unitPropLife, c_unitPropNormal) - libC6542F50_gv_aPArchDataValue));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libC6542F50_gt_DataMismatch_Init () {
    libC6542F50_gt_DataMismatch = TriggerCreate("libC6542F50_gt_DataMismatch_Func");
    TriggerAddEventTimePeriodic(libC6542F50_gt_DataMismatch, 1.0, c_timeGame);
}

void libC6542F50_InitTriggers () {
    libC6542F50_gt_APClearChat_Init();
    libC6542F50_gt_APArchipelagoTechUpdate_Init();
    libC6542F50_gt_APArchipelagoColorUpdate_Init();
    libC6542F50_gt_APRainbowCycle_Init();
    libC6542F50_gt_APClearTech_Init();
    libC6542F50_gt_HealthCheck_Init();
    libC6542F50_gt_APDontHideArchipelago_Init();
    libC6542F50_gt_APSetInitFinished_Init();
    libC6542F50_gt_APPreInitMap_Init();
    libC6542F50_gt_DataMismatch_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libC6542F50_InitLib_completed = false;

void libC6542F50_InitLib () {
    if (libC6542F50_InitLib_completed) {
        return;
    }

    libC6542F50_InitLib_completed = true;

    libC6542F50_InitLibraries();
    libC6542F50_InitVariables();
    libC6542F50_InitTriggers();
}

