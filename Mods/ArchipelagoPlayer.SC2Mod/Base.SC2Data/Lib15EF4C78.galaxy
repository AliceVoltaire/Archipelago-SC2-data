include "TriggerLibs/NativeLib"

include "Lib15EF4C78_h"

//--------------------------------------------------------------------------------------------------
// Library: Archipelago Player Handlers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib15EF4C78_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib15EF4C78_InitVariables_completed = false;

void lib15EF4C78_InitVariables () {
    int init_i;
    int init_j;

    if (lib15EF4C78_InitVariables_completed) {
        return;
    }

    lib15EF4C78_InitVariables_completed = true;

    lib15EF4C78_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("AP_PsiStrikeBlink", "Energy");
    lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_SET_EVENT = "AP_Player_OnPrimaryTownHallSetEvent";
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroReviveTimer[init_i][init_j] = 60.0;
        }
    }
    lib15EF4C78_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_HeroShowLevel[init_i][init_j] = true;
        }
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        lib15EF4C78_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib15EF4C78_gv_cUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            lib15EF4C78_gv_cU_VoidHeroUIRevivable[init_i][init_j] = true;
        }
    }
    lib15EF4C78_gv_cU_HeroAutomaticIndex = 1;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIType[init_i] = lib15EF4C78_ge_CampaignHeroes_None;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPositionX[init_i] = 20;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPositionY[init_i] = 30;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[init_i] = true;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[init_i] = true;
    }
    lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan = 60.0;
    lib15EF4C78_gv_zS_KerriganCheatXP = 1;
    lib15EF4C78_gv_zS_KerriganActualLevel = 1;
    lib15EF4C78_gv_zS_KerriganPing = c_invalidPingId;
    lib15EF4C78_gv_zS_KerriganLevelLabel = c_invalidDialogControlId;
}

// Presets
// Functions
string lib15EF4C78_gf_AP_Player_findNovaWeapon (unit lp_sourceNovaUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponCanisterRifle") == true)) {
        return "AP_NovaWeaponCanisterRifle";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponHellfireShotgun") == true)) {
        return "AP_NovaWeaponHellfireShotgun";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponPlasmaRifle") == true)) {
        return "AP_NovaWeaponPlasmaRifle";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponPsiBlade") == true)) {
        return "AP_NovaWeaponPsiBlade";
    }
    else if ((UnitHasBehavior(lp_sourceNovaUnit, "AP_NovaWeaponBlazefireBlade") == true)) {
        return "AP_NovaWeaponBlazefireBlade";
    }
    return null;
}

int lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__player;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getUnit () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__unit;
}

int lib15EF4C78_gf_AP_Player_OnPrimaryTownHallAfterDeathFound__getPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__player;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallAfterDeathFound__getUnit () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__unit;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallSet__getOldBuilding () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__oldBuilding;
}

unit lib15EF4C78_gf_AP_Player_OnPrimaryTownHallSet__getNewBuilding () {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__newBuilding;
}

void lib15EF4C78_gf_AP_Player_findPrimaryTownHall (int lp_player) {
    // Variable Declarations
    unitgroup lv_candidateBuildings;
    unit lv_currentBuilding;

    // Automatic Variable Declarations
    unitgroup autoD7DE581B_g;
    int autoD7DE581B_u;

    // Variable Initialization
    lv_candidateBuildings = UnitGroupEmpty();

    // Implementation
    lv_candidateBuildings = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD7DE581B_g = lv_candidateBuildings;
    autoD7DE581B_u = UnitGroupCount(autoD7DE581B_g, c_unitCountAll);
    for (;; autoD7DE581B_u -= 1) {
        lv_currentBuilding = UnitGroupUnitFromEnd(autoD7DE581B_g, autoD7DE581B_u);
        if (lv_currentBuilding == null) { break; }
        if ((UnitHasBehavior2(lv_currentBuilding, "AP_ZerglingRespawnPrimary") == true)) {
            lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player] = lv_currentBuilding;
            break;
        }

    }
}

unit lib15EF4C78_gf_AP_Player_getPrimaryTownHall (int lp_player) {
    // Variable Declarations
    unit lv_primaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player];
    if (((lv_primaryBuilding == null) || (UnitIsAlive(lv_primaryBuilding) == false))) {
        lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lp_player);
        lv_primaryBuilding = lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player];
        if (((lv_primaryBuilding == null) || (UnitIsAlive(lv_primaryBuilding) == false))) {
            return null;
        }

    }

    return lv_primaryBuilding;
}

void lib15EF4C78_gf_ZerglingRespawnSetPrimaryHatchery (int lp_player, unit lp_building) {
    // Variable Declarations
    unit lv_oldPrimaryBuilding;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_oldPrimaryBuilding = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    UnitCreateEffectUnit(lp_building, "AP_ZerglingRespawnPrimaryRemoveOthers", lp_building);
    UnitBehaviorAdd(lp_building, "AP_ZerglingRespawnPrimary", lp_building, 1);
    lib15EF4C78_gv_aP_Player_PrimaryTownHall[lp_player] = lp_building;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__oldBuilding = lv_oldPrimaryBuilding;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallSet__newBuilding = lp_building;
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_SET_EVENT);
}

void lib15EF4C78_gf_SetHeroPanelUnit2 (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        lib15EF4C78_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_15EF4C78_0F46D063"), false);
    }
}

void lib15EF4C78_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoD494CD2E_val;
    unit auto5129D7DB_val;
    int auto7793CC50_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    lib15EF4C78_gv_cU_HeroUnit[0][0] = lp_heroUnit;
    lib15EF4C78_gv_cU_HeroType[lp_index][0] = lib15EF4C78_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit));
    autoD494CD2E_val = lib15EF4C78_gv_cU_HeroType[lp_index][0];
    if (autoD494CD2E_val == lib15EF4C78_ge_CampaignHeroes2_Hyperion) {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = false;
    }
    else if (autoD494CD2E_val == lib15EF4C78_ge_CampaignHeroes2_LaserDrill) {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = false;
    }
    else {
        lib15EF4C78_gv_cU_HeroShowLevel[lp_index][0] = true;
    }
    lib15EF4C78_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((PlayerRace(lp_player) == "Zerg")) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((PlayerRace(lp_player) == "Terr")) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((lib15EF4C78_gf_CU_ChampionHasShields2(lib15EF4C78_gf_CU_HeroTypeFromUnitType(UnitGetType(lp_heroUnit))) == true)) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    lib15EF4C78_gv_cU_HeroExists[lp_player][0] = true;
    if ((lib15EF4C78_gv_cU_HeroUnit[0][0] == null)) {
        lib15EF4C78_gv_cU_HeroExists[lp_player][0] = false;
    }
    else {
        TriggerEnable(lib15EF4C78_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(lib15EF4C78_gt_CU_HeroUnitVitalChange, true);
        auto5129D7DB_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        auto7793CC50_val = lp_index;
        if (auto7793CC50_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (auto7793CC50_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= lib15EF4C78_gv_cUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_15EF4C78_931B4F03"), false);
        }
    }
}

void lib15EF4C78_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void lib15EF4C78_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoC7DB28ED_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    lib15EF4C78_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    lib15EF4C78_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    lib15EF4C78_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    lib15EF4C78_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    lib15EF4C78_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    lib15EF4C78_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    lib15EF4C78_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    autoC7DB28ED_val = lp_index;
    if (autoC7DB28ED_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoC7DB28ED_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    lib15EF4C78_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

int lib15EF4C78_gf_CU_HeroTypeFromUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    string auto80A8D158_val;

    // Implementation
    auto80A8D158_val = lp_unitType;
    if (auto80A8D158_val == "AP_K5Kerrigan") {
        return lib15EF4C78_ge_CampaignHeroes2_Kerrigan;
    }
    else if (auto80A8D158_val == "AP_K5KerriganBurrowed") {
        return lib15EF4C78_ge_CampaignHeroes2_Kerrigan;
    }
    else if (auto80A8D158_val == "AP_NovaHero") {
        return lib15EF4C78_ge_CampaignHeroes2_Nova;
    }
    else if (auto80A8D158_val == "NovaReviveBeacon") {
        return lib15EF4C78_ge_CampaignHeroes2_NovaReviveBeacon;
    }
    else {
    }
    return lib15EF4C78_ge_CampaignHeroes2_None;
}

string lib15EF4C78_gf_CU_HeroIcon (int lp_heroType, unit lp_heroUnit) {
    // Automatic Variable Declarations
    int autoA30E0AD1_val;

    // Implementation
    autoA30E0AD1_val = lp_heroType;
    if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        else {
            return "Assets\\Textures\\chrysalisportrait_static.dds";
        }
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_KerriganReviveCocoon) {
        return "Assets\\Textures\\chrysalisportrait_static.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Artanis) {
        return "Assets\\Textures\\ui-heroicon-artanis.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Alarak) {
        return "Assets\\Textures\\alarakex3_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_AlarakReviveBeacon) {
        return "Assets\\Textures\\alarakdeath_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Hyperion) {
        return "Assets\\Textures\\btn-unit-terran-hyperion.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_LaserDrill) {
        return "Assets\\Textures\\btn-tips-laserdrillcontrol.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Zagara) {
        if ((UnitIsAlive(lp_heroUnit) == true)) {
            return "Assets\\Textures\\ui_commanderportrait_zagara.dds";
        }
        else {
            return "Assets\\Textures\\cocoonportrait_static.dds";
        }
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ZagaraReviveCocoon) {
        return "Assets\\Textures\\cocoonportrait_static.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_NovaReviveBeacon) {
        return "Assets\\Textures\\btn-upgrade-nova-novarespawn.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Nova) {
        return "Assets\\Textures\\novaex3_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Selendis) {
        return "Assets\\Textures\\ui-heroicon-selendis.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Fenix) {
        return "Assets\\Textures\\btn-hero-fenix.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_FenixDragoon) {
        return "Assets\\Textures\\btn-hero-fenix-dragoon.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_FenixArbiter) {
        return "Assets\\Textures\\btn-hero-fenix-arbiter.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Dehaka) {
        return "Assets\\Textures\\btn-hero-dehaka.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_DehakasDen) {
        return "Assets\\Textures\\btn-hero-dehaka-death.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ArtifactTruck) {
        return "Assets\\Textures\\btn-cradleofdeath-truck.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Zeratul) {
        return "Assets\\Textures\\zeratul_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_ZeratulReviveBeacon) {
        return "Assets\\Textures\\btn-building-protoss-zeratulbeacon.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_Gary) {
        return "Assets\\Textures\\gary_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_SuperGary) {
        return "Assets\\Textures\\supergary_ingame_heroportrait.dds";
    }
    else if (autoA30E0AD1_val == lib15EF4C78_ge_CampaignHeroes2_GaryReviveBeacon) {
        return "Assets\\Textures\\btn-building-stetmann-garysroom.dds";
    }
    else {
        return "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds";
    }
}

void lib15EF4C78_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;

    // Automatic Variable Declarations
    int autoA2804534_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((lib15EF4C78_gv_cU_HeroUnit[0][0] == null)) {
        if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((lib15EF4C78_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        lib15EF4C78_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    autoA2804534_val = lp_index;
    if (autoA2804534_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_36D77694");
    }
    else if (autoA2804534_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_0733DA16");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_5E7F54C6", "A", UnitGetName(lib15EF4C78_gv_cU_HeroUnit[0][0]));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_5E7F54C6", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_5E7F54C6"), lv_updateGroup);
    libNtve_gf_SetDialogItemImage(lib15EF4C78_gv_cU_HeroDialogIconImage[lp_index], lib15EF4C78_gf_CU_HeroIcon(lib15EF4C78_gv_cU_HeroType[lp_index][0], lib15EF4C78_gv_cU_HeroUnit[0][0]), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_4BB6ED85", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_4BB6ED85", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_4BB6ED85"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, lib15EF4C78_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_15EF4C78_41388CCA", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_15EF4C78_41388CCA", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_41388CCA"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, lib15EF4C78_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, lib15EF4C78_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_425F4C66", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_425F4C66", "MaxEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_425F4C66"), lv_updateGroup);
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((lib15EF4C78_gf_CU_ChampionHasShields2(lib15EF4C78_gv_cU_HeroType[lp_index][0]) == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lib15EF4C78_gf_CU_ChampionHasShields(lib15EF4C78_gv_cU_HeroType[lp_index][0]) == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, lib15EF4C78_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] > 0.0)) {
        lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] -= lib15EF4C78_gv_cUC_HeroUpdateFrequency;
        if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lp_index][0] <= 0.0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(lib15EF4C78_gv_cU_HeroUnit[0][0]) == false)) {
        if ((lib15EF4C78_gv_cU_VoidHeroUIRevivable[lp_index][0] == true)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_cU_HeroDialogButton[lp_index], lib15EF4C78_gv_cU_HeroUnit[0][0], lv_updateGroup);
}

string lib15EF4C78_gf_CU_PresetToHeroGameLink (int lp_championPreset) {
    // Automatic Variable Declarations
    int autoB63D1C75_val;

    // Implementation
    autoB63D1C75_val = lp_championPreset;
    if (autoB63D1C75_val == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) {
        return "Kerrigan";
    }
    else {
        return null;
    }
}

bool lib15EF4C78_gf_CU_ChampionHasShields (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Kerrigan) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Fenix) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_FenixArbiter) || (lp_heroType == lib15EF4C78_ge_CampaignHeroes2_FenixDragoon))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib15EF4C78_gf_CU_ChampionHasShields2 (int lp_heroType) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_heroType == lib15EF4C78_ge_CampaignHeroes2_Alarak))) {
        return true;
    }
    else {
        return false;
    }
}

void lib15EF4C78_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    unit autoA547AD8A_val;
    int auto2121B4A7_val;

    // Implementation
    lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] = lp_heroUnit;
    lib15EF4C78_gv_zS_SwarmHeroUIType[lp_index] = lib15EF4C78_ge_CampaignHeroes_None;
    if ((lp_heroUnit == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player))) {
        if ((TechTreeUpgradeCount(lp_player, "AP_KerriganInfestedCosmetic", c_techCountQueuedOrBetter) == 0)) {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganghost.dds";
        }
        else {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-hero-kerriganqueenofblades.dds";
        }
        lib15EF4C78_gv_zS_SwarmHeroUIType[lp_index] = lib15EF4C78_ge_CampaignHeroes_Kerrigan;
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] = true;
    }
    else {
        lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] = false;
        if ((UnitGetType(lp_heroUnit) == "AP_NovaHero")) {
            lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index] = "Assets\\Textures\\btn-commander-nova.dds";
        }

    }
    lib15EF4C78_gf_ZS_UpdateHeroPanel(lp_player, lp_index);
    if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] == null) && (lib15EF4C78_gv_zS_SwarmHeroUIUnit[2] == null)) {
            TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, false);
            TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, false);
        }

    }
    else {
        TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, true);
        TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, true);
        TriggerEnable(lib15EF4C78_gt_ZS_MouseHoverText, true);
        TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, true);
        autoA547AD8A_val = lp_heroUnit;
        if (autoA547AD8A_val == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) {
            libNtve_gf_SetDialogItemAnimationDuration(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan, PlayerGroupAll());
        }
        else {
        }
        auto2121B4A7_val = lp_index;
        if (auto2121B4A7_val == 1) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1], c_hotkeyHeroSelect0, PlayerGroupAll());
        }
        else if (auto2121B4A7_val == 2) {
            libNtve_gf_SetDialogItemHotkey(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2], c_hotkeyHeroSelect1, PlayerGroupAll());
        }
        else {
        }
    }
}

void lib15EF4C78_gf_ZS_ShowHideHeroPanel (bool lp_showHide) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto08EB5976_ae = 2;
    const int auto08EB5976_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto08EB5976_ai >= 0 && lv_index <= auto08EB5976_ae) || (auto08EB5976_ai < 0 && lv_index >= auto08EB5976_ae) ) ; lv_index += auto08EB5976_ai ) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], PlayerGroupAll(), lp_showHide);
        }

    }
}

void lib15EF4C78_gf_ZS_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int autoD5A72AA3_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame");
    }
    lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), true);
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[lp_index] = DialogControlLastCreated();
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePortrait, "UIContainer/ConsoleUIContainer/HeroUnitFrameLevelUpPortrait");
        lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[lp_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "AP_KerriganLevelUpPortrait", PlayerGroupAll());
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    }

    autoD5A72AA3_val = lp_index;
    if (autoD5A72AA3_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/HeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (autoD5A72AA3_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], 510, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarBackground[lp_index], 510, PlayerGroupAll());
}

void lib15EF4C78_gf_ZS_UpdateHeroPanel (int lp_player, int lp_index) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    int autoB139472A_val;

    // Variable Initialization

    // Implementation
    if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == null)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), false);
        }

        return ;
    }

    if ((lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index] == c_invalidDialogControlId)) {
        lib15EF4C78_gf_ZS_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lp_index], PlayerGroupAll(), true);
    autoB139472A_val = lp_index;
    if (autoB139472A_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_E11D6511");
    }
    else if (autoB139472A_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_15EF4C78_2D5274FE");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_7DF39159", "A", UnitTypeGetName(UnitGetType(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index])));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_7DF39159", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_7DF39159"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lib15EF4C78_gv_zS_SwarmHeroUIDialogIconImage[lp_index], lib15EF4C78_gv_zS_SwarmHeroUIIcon[lp_index], PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_DE0A8BC5", "CurrentLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_DE0A8BC5", "MaxLife", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_DE0A8BC5"), PlayerGroupAll());
    lv_life = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropLifePercent, c_unitPropCurrent) * 2.24));
    if ((lv_life > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), lv_life, 22);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lp_index], PlayerGroupAll(), false);
    }
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_1421E6C3", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_1421E6C3", "MaxEnergy", FixedToText(UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_15EF4C78_1421E6C3"), PlayerGroupAll());
    if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), false);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), false);
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyPercent, c_unitPropCurrent) * 2.24));
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarBackground[lp_index], PlayerGroupAll(), true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), lv_energy, 9);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
    }
    if ((lib15EF4C78_gv_zS_SwarmHeroUIShowLevel[lp_index] == true)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player))) {
            libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], IntToText(lib15EF4C78_gv_zS_KerriganLevel[lp_player]), PlayerGroupAll());
        }

    }
    else {
        libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelLabel[lp_index], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelBox[lp_index], PlayerGroupAll(), false);
    }
    if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] > 0.0)) {
        lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] -= lib15EF4C78_gv_zS_SwarmHeroUIUpdateFrequency;
        if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lp_index] <= 0.0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lp_index], PlayerGroupAll(), false);
            DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lp_index], PlayerGroupAll(), 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index]) == false)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) && (lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player] == true)) {
            libNtve_gf_SetDialogItemAnimationTime(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], (lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan - PlayerGetCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan)), PlayerGroupAll());
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), true);
        }
        else if (true) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
        }
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lp_index], PlayerGroupAll(), false);
        }

    }
    else {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    }
    if ((UnitIsAlive(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index]) == true)) {
        libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index], lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index], PlayerGroupAll());
    }
    else {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIUnit[lp_index] == lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)) && (UnitIsAlive(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]) == true)) {
            libNtve_gf_SetDialogItemUnit(lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[lp_index], lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], PlayerGroupAll());
        }
    }
}

trigger auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = null;

void lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect () {
    if (auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger == null) {
        auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger = TriggerCreate("auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] == null) || (lib15EF4C78_gv_zS_SwarmHeroUIUnit[1] != lib15EF4C78_gv_zS_Kerrigan) || (lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1] == c_invalidDialogControlId))) {
        return true;
    }

    if ((lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying == true)) {
        return true;
    }

    lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = true;
    libNtve_gf_ClearPortraitAnimation(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "TriggerPortraitAnim");
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), true);
    ActorSend(ActorFromPortrait(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1])), "AnimBlendTimeApply 0.000000");
    libNtve_gf_PortraitSetAnim(PortraitGetTriggerControl(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1]), "Birth", "TriggerPortraitAnim", 0, 0.0);
    Wait(2.0, c_timeGame);
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogLevelupPortrait[1], PlayerGroupAll(), false);
    lib15EF4C78_gv_zS_KerriganHeroPanelLevelUpEffectPlaying = false;
    return true;
}

unit lib15EF4C78_gf_ZS_HeroReviveCocoon (int lp_player, int lp_heroType) {
    // Automatic Variable Declarations
    int autoA862168B_val;

    // Implementation
    autoA862168B_val = lp_heroType;
    if (autoA862168B_val == lib15EF4C78_ge_CampaignHeroes_Kerrigan) {
        return lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player];
    }
    else {
    }
    return null;
}

void lib15EF4C78_gf_SetHeroReviverCocoon (int lp_heroType, unit lp_cocoon, int lp_player) {
    // Automatic Variable Declarations
    int autoE7332B2B_val;

    // Implementation
    autoE7332B2B_val = lp_heroType;
    if (autoE7332B2B_val == lib15EF4C78_ge_CampaignHeroes_Kerrigan) {
        lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player] = lp_cocoon;
    }
    else {
    }
}

bool lib15EF4C78_gf_AP_Player_isKerriganRevivable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player];
}

void lib15EF4C78_gf_AP_Player_setKerriganRevivable (int lp_player, bool lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib15EF4C78_gv_aP_Player_isKerriganRevivableForPlayer[lp_player] = lp_value;
}

bool lib15EF4C78_gf_AP_Player_isKerriganAlive (int lp_player) {
    // Variable Declarations
    unitgroup lv_unitsToQuery;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsToQuery = UnitGroupEmpty();

    // Implementation
    lv_unitsToQuery = UnitGroup("AP_K5Kerrigan", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganPsiStrike", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return (UnitGroupCount(lv_unitsToQuery, c_unitCountAlive) >= 1);
}

unit lib15EF4C78_gf_AP_Player_getKerriganUnit (int lp_player) {
    // Variable Declarations
    unitgroup lv_unitsToQuery;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoF42F238C_g;
    int autoF42F238C_u;

    // Variable Initialization
    lv_unitsToQuery = UnitGroupEmpty();

    // Implementation
    lv_unitsToQuery = UnitGroup("AP_K5Kerrigan", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsToQuery, UnitGroup("AP_K5KerriganPsiStrike", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoF42F238C_g = lv_unitsToQuery;
    autoF42F238C_u = UnitGroupCount(autoF42F238C_g, c_unitCountAll);
    for (;; autoF42F238C_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoF42F238C_g, autoF42F238C_u);
        if (lv_currentUnit == null) { break; }
        break;
    }
    if ((lv_currentUnit == null)) {
        return lib15EF4C78_gv_kerriganUnit[lp_player];
    }
    else {
        lib15EF4C78_gv_kerriganUnit[lp_player] = lv_currentUnit;
    }
    return lv_currentUnit;
}

trigger auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger = null;
int auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player;

void lib15EF4C78_gf_StartKerriganReviveCooldown (int lp_player) {
    auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player = lp_player;

    if (auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger == null) {
        auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger = TriggerCreate("auto_lib15EF4C78_gf_StartKerriganReviveCooldown_TriggerFunc");
    }

    TriggerExecute(auto_lib15EF4C78_gf_StartKerriganReviveCooldown_Trigger, false, false);
}

bool auto_lib15EF4C78_gf_StartKerriganReviveCooldown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib15EF4C78_gf_StartKerriganReviveCooldown_lp_player;

    // Variable Declarations
    unit lv_reviveSpot;
    text lv_tip;
    text lv_subtip;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
    UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 0);
    UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 1);
    Wait(2.0, c_timeGame);
    lv_reviveSpot = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    while (((lv_reviveSpot == null) || (UnitIsAlive(lv_reviveSpot) == false))) {
        Wait(1.0, c_timeGame);
        lv_reviveSpot = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lp_player);
    }
    if ((lib15EF4C78_gf_AP_Player_isKerriganAlive(lp_player) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_KerriganReviveCocoon", 0, lp_player, UnitGetPosition(lv_reviveSpot));
        lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player] = UnitLastCreated();
        UnitCreateEffectUnit(lv_reviveSpot, "AP_CopyHatcheryRally", lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
        UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]), c_orderQueueReplace);
        UnitSetState(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], c_unitStateTooltipable, true);
        lv_tip = UnitTypeGetName(UnitGetType(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]));
        libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
        PlayerAddCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan, lib15EF4C78_gv_zS_ReviveCooldownTimeKerrigan);
        lib15EF4C78_gv_zS_ReviveKerriganPlayerAsyncParam = lp_player;
        TriggerExecute(lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner, true, false);
        Wait(0.5, c_timeGame);
        Wait(6.5, c_timeGame);
        if ((lib15EF4C78_gf_AP_Player_isKerriganAlive(lp_player) == false)) {
            UnitSetPosition(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), UnitGetPosition(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]), false);
        }

    }

    return true;
}

void lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController (int lp_player) {
    // Variable Declarations
    bool lv_skipExit;

    // Automatic Variable Declarations
    unitgroup auto63EC0E37_g;
    int auto63EC0E37_u;
    unit auto63EC0E37_var;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    while (true) {
        if ((lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] == true)) {
            lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] = false;
            lv_skipExit = true;
            break;
        }

        if ((PlayerGetCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan) == 0.0)) {
            break;
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    if ((lv_skipExit == true)) {
    }
    else {
        UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("AP_KerriganRevive", 0), lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
        auto63EC0E37_g = UnitGroupSelected(lp_player);
        auto63EC0E37_u = UnitGroupCount(auto63EC0E37_g, c_unitCountAll);
        for (;; auto63EC0E37_u -= 1) {
            auto63EC0E37_var = UnitGroupUnitFromEnd(auto63EC0E37_g, auto63EC0E37_u);
            if (auto63EC0E37_var == null) { break; }
            if ((auto63EC0E37_var == lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player])) {
                UnitSelect(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), lp_player, true);
            }

        }
        UnitKill(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
        UnitIssueOrder(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), Order(AbilityCommand("AP_K5KerriganUnburrow", 0)), c_orderQueueReplace);
        UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 1);
        UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 0);
    }
}

void lib15EF4C78_gf_ReviveHeroInstantly (int lp_player, int lp_type, bool lp_displayReviveMessage) {
    // Automatic Variable Declarations
    int auto7F63F5C4_val;

    // Implementation
    auto7F63F5C4_val = lp_type;
    if (auto7F63F5C4_val == lib15EF4C78_ge_HeroUnit_Kerrigan) {
        lib15EF4C78_gv_zS_ReviveKerriganInterupt[lp_player] = true;
        if ((UnitIsAlive(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]) == true)) {
            ActorSend(lib15EF4C78_gv_zS_KerriganActor, "Destroy");
            libNtve_gf_PlayerRemoveCooldown(lp_player, lib15EF4C78_gv_zSC_HeroReviveLinkKerrigan);
            UnitIssueOrder(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player], libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("KerriganRevive", 0), lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player)), c_orderQueueReplace);
            Wait(0.0625, c_timeGame);
            UnitKill(lib15EF4C78_gv_zS_HeroReviverKerrigan[lp_player]);
            UnitIssueOrder(lib15EF4C78_gv_zS_Kerrigan, Order(AbilityCommand("AP_K5KerriganUnburrow", 0)), c_orderQueueReplace);
            UserDataSetInt("AP_KerriganStates", "Alive", "Value", 1, 1);
            UserDataSetInt("AP_KerriganStates", "Dead", "Value", 1, 0);
        }

    }
    else {
    }
}

void lib15EF4C78_gf_ZS_KerriganCustomStatusBarUpdate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib15EF4C78_gv_zS_KerriganLevel[0] > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganStatusBarUpgrade", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganStatusBarUpgrade", 0);
    }
}

void lib15EF4C78_gf_ZS_LevelUpKerrigan () {
    // Variable Declarations
    int lv_originalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalXP = lib15EF4C78_gv_zS_KerriganLevel[0];
    lib15EF4C78_gf_ZS_RecalculateKerriganXP();
    if (((lib15EF4C78_gv_zS_KerriganLevel[0] <= lv_originalXP))) {
        return ;
    }

    lib15EF4C78_gf_ZS_PlayKerriganHeroPanelLevelUpEffect();
}

void lib15EF4C78_gf_ZS_RecalculateKerriganXP () {
    // Variable Declarations
    string lv_indexObjective;
    string lv_indexMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib15EF4C78_gv_zS_KerriganLevel[0] = 1;
    lib15EF4C78_gv_zS_KerriganActualLevel = 1;
    if ((lib15EF4C78_gf_ZS_KerriganLevelFromXP((lib15EF4C78_gv_zS_KerriganCheatXP + lib15EF4C78_gv_zS_KerriganLevel[0])) > lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL)) {
        lib15EF4C78_gv_zS_KerriganCheatXP = (lib15EF4C78_gf_ZS_KerriganXPFromLevel(lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL) - lib15EF4C78_gv_zS_KerriganLevel[0]);
    }

    lib15EF4C78_gv_zS_KerriganLevel[0] += lib15EF4C78_gv_zS_KerriganCheatXP;
    if ((lib15EF4C78_gv_zS_Kerrigan != null)) {
        UnitSetPropertyFixed(lib15EF4C78_gv_zS_Kerrigan, c_unitPropXP, IntToFixed(lib15EF4C78_gv_zS_KerriganLevel[0]));
    }

    lib15EF4C78_gf_ZS_KerriganCustomStatusBarUpdate(0);
    UserDataSetInt("StoryStates", "Kerrigan Current Level", "value", 1, lib15EF4C78_gv_zS_KerriganLevel[0]);
}

int lib15EF4C78_gf_ZS_KerriganLevelXPMax (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int lib15EF4C78_gf_ZS_KerriganLevelFromXP (int lp_xP) {
    // Automatic Variable Declarations
    // Implementation
    return lp_xP;
}

int lib15EF4C78_gf_ZS_KerriganXPFromLevel (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return lp_level;
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusLife (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Life", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusEnergy (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Energy", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusArmor (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Armor", 1);
}

int lib15EF4C78_gf_ZS_KerriganReturnLevelBonusDamage (int lp_kerriganLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("AP_KerriganLevels", UserDataInstance("AP_KerriganLevels", lp_kerriganLevel), "Damage", 1);
}

void lib15EF4C78_gf_ZS_ApplyKerriganLevelBonus (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_life;
    int lv_energy;
    int lv_damage;
    int lv_armor;
    int lv_index;
    int lv_userDataIndex;

    // Automatic Variable Declarations
    int autoB4B245A4_ae;
    const int autoB4B245A4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_level > 0)) {
        autoB4B245A4_ae = lp_level;
        lv_index = 1;
        for ( ; ( (autoB4B245A4_ai >= 0 && lv_index <= autoB4B245A4_ae) || (autoB4B245A4_ai < 0 && lv_index >= autoB4B245A4_ae) ) ; lv_index += autoB4B245A4_ai ) {
            lv_userDataIndex = ModI(lv_index, lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL);
            if ((lv_userDataIndex == 0)) {
                lv_userDataIndex = lib15EF4C78_gv_zSC_KERRIGANMAXLEVEL;
            }

            lv_life += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusLife(lv_userDataIndex);
            lv_energy += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusEnergy(lv_userDataIndex);
            lv_damage += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusDamage(lv_userDataIndex);
            lv_armor += lib15EF4C78_gf_ZS_KerriganReturnLevelBonusArmor(lv_userDataIndex);
        }
    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeEnergy", ModI(lv_energy, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth", ModI(lv_life, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeEnergy100", (lv_energy / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth100", (ModI(lv_life, 10000) / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeHealth10000", (lv_life / 10000));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeDamage", ModI(lv_damage, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeDamage100", (lv_damage / 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeArmor", ModI(lv_armor, 100));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AP_KerriganKitUpgradeArmor100", (lv_armor / 100));
    lib15EF4C78_gv_zS_KerriganLevel[lp_player] = lp_level;
    TextExpressionSetToken("Param/Expression/lib_15EF4C78_929A180C", "level", IntToText(lp_level));
    UnitSetInfoText2(lib15EF4C78_gf_AP_Player_getKerriganUnit(lp_player), TextExpressionAssemble("Param/Expression/lib_15EF4C78_929A180C"));
}

int lib15EF4C78_gf_AP_Player_getKerriganLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib15EF4C78_gv_zS_KerriganLevel[lp_player];
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ArchipelagoPlayerHandlersConstructor
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Init () {
    lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor = TriggerCreate("lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Barracks, null, "AP_BarracksReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "BarracksReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoBarracks_Init () {
    lib15EF4C78_gt_ReactorswaptoBarracks = TriggerCreate("lib15EF4C78_gt_ReactorswaptoBarracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoBarracks, null, "BarracksReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Factory_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Factory, null, "AP_FactoryReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoFactory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "FactoryReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoFactory_Init () {
    lib15EF4C78_gt_ReactorswaptoFactory = TriggerCreate("lib15EF4C78_gt_ReactorswaptoFactory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoFactory, null, "FactoryReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoAP_Starport_Init () {
    lib15EF4C78_gt_ReactorswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_ReactorswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoAP_Starport, null, "AP_StarportReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reactor swap to Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ReactorswaptoStarport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "StarportReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "Reactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ReactorswaptoStarport_Init () {
    lib15EF4C78_gt_ReactorswaptoStarport = TriggerCreate("lib15EF4C78_gt_ReactorswaptoStarport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_ReactorswaptoStarport, null, "StarportReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Barracks, null, "AP_BarracksTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "BarracksTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoBarracks_Init () {
    lib15EF4C78_gt_TechLabswaptoBarracks = TriggerCreate("lib15EF4C78_gt_TechLabswaptoBarracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoBarracks, null, "BarracksTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Factory_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Factory, null, "AP_FactoryTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoFactory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "FactoryTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoFactory_Init () {
    lib15EF4C78_gt_TechLabswaptoFactory = TriggerCreate("lib15EF4C78_gt_TechLabswaptoFactory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoFactory, null, "FactoryTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoAP_Starport_Init () {
    lib15EF4C78_gt_TechLabswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_TechLabswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoAP_Starport, null, "AP_StarportTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Lab swap to Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechLabswaptoStarport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "StarportTechLab"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "TechLab", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechLabswaptoStarport_Init () {
    lib15EF4C78_gt_TechLabswaptoStarport = TriggerCreate("lib15EF4C78_gt_TechLabswaptoStarport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechLabswaptoStarport, null, "StarportTechLab", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Barracks
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_BarracksTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Barracks = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Barracks, null, "AP_BarracksTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Factory
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Factory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_FactoryTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Factory_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Factory = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Factory_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Factory, null, "AP_FactoryTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Reactor swap to AP_Starport
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_TechReactorswaptoAP_Starport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(UnitAddOnChild(EventUnit(), 0)) != "AP_StarportTechReactor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ReplaceUnit(UnitAddOnChild(EventUnit(), 0), "AP_TechReactor", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_TechReactorswaptoAP_Starport_Init () {
    lib15EF4C78_gt_TechReactorswaptoAP_Starport = TriggerCreate("lib15EF4C78_gt_TechReactorswaptoAP_Starport_Func");
    TriggerAddEventUnitBehaviorChange(lib15EF4C78_gt_TechReactorswaptoAP_Starport, null, "AP_StarportTechReactor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_setHolodecoyWeapon
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AP_NovaHoloDecoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), lib15EF4C78_gf_AP_Player_findNovaWeapon(EventUnit()), EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Init () {
    lib15EF4C78_gt_AP_Player_setHolodecoyWeapon = TriggerCreate("lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Func");
    TriggerAddEventUnitCreated(lib15EF4C78_gt_AP_Player_setHolodecoyWeapon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set5SecondsMark
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_Set5SecondsMark_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoEC3833D4_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEC3833D4_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoEC3833D4_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_GameTimeGreaterthan5Seconds", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_Set5SecondsMark_Init () {
    lib15EF4C78_gt_Set5SecondsMark = TriggerCreate("lib15EF4C78_gt_Set5SecondsMark_Func");
    TriggerAddEventTimeElapsed(lib15EF4C78_gt_Set5SecondsMark, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZerglingRespawnInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZerglingRespawnInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoFB63C786_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFB63C786_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoFB63C786_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AP_ZerglingRespawnControllerUnit", 0, lv_currentPlayer, Point(0.0, 0.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZerglingRespawnInit_Init () {
    lib15EF4C78_gt_ZerglingRespawnInit = TriggerCreate("lib15EF4C78_gt_ZerglingRespawnInit_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_ZerglingRespawnInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;

    // Automatic Variable Declarations
    const int auto0573C803_ae = 14;
    const int auto0573C803_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto0573C803_ai >= 0 && lv_i <= auto0573C803_ae) || (auto0573C803_ai < 0 && lv_i >= auto0573C803_ae) ) ; lv_i += auto0573C803_ai ) {
        lib15EF4C78_gv_kerriganPsiStrikeFacing = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) && (lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((lib15EF4C78_gv_kerriganPsiStrikeFacing > (lv_facing + 90.0)) || (lib15EF4C78_gv_kerriganPsiStrikeFacing < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "AP_PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_KerriganPsiStrike_Init () {
    lib15EF4C78_gt_KerriganPsiStrike = TriggerCreate("lib15EF4C78_gt_KerriganPsiStrike_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_KerriganPsiStrike, null, AbilityCommand("AP_PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SlayerInit
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_SlayerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto999E0912_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto999E0912_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto999E0912_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "AP_SlayerConfig", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_SlayerInit_Init () {
    lib15EF4C78_gt_SlayerInit = TriggerCreate("lib15EF4C78_gt_SlayerInit_Func");
    TriggerAddEventMapInit(lib15EF4C78_gt_SlayerInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "AP_CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CreepTumorBuild_Init () {
    lib15EF4C78_gt_CreepTumorBuild = TriggerCreate("lib15EF4C78_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(lib15EF4C78_gt_CreepTumorBuild, null, AbilityCommand("AP_CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_FindPrimaryTownHallForAllPlayers
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto05ADD373_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto05ADD373_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto05ADD373_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lib15EF4C78_gf_AP_Player_findPrimaryTownHall(lv_currentPlayer);
    }
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_INIT_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Init () {
    lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers = TriggerCreate("lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Func");
    TriggerAddEventTimeElapsed(lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_OnPrimaryTownHallDeathEmitEvent
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto3C928EA7_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    auto3C928EA7_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3C928EA7_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((lib15EF4C78_gv_aP_Player_PrimaryTownHall[lv_currentPlayer] == lv_deadUnit)) {
            lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__unit = lv_deadUnit;
            lib15EF4C78_gv_aP_Player_OnPrimaryTownHallDeath__player = lv_currentPlayer;
            TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_DEATH_EVENT);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Init () {
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent = TriggerCreate("lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_OnPrimaryTownHallDeathSeekNew
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib15EF4C78_gf_AP_Player_OnPrimaryTownHallDeath__getPlayer();
    while (true) {
        lv_unit = lib15EF4C78_gf_AP_Player_getPrimaryTownHall(lv_player);
        if ((lv_unit == null)) {
            Wait(2.0, c_timeGame);
        }
        else {
            break;
        }
    }
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__unit = lv_unit;
    lib15EF4C78_gv_aP_Player_OnPrimaryTownHallAfterDeathFound__player = lv_player;
    TriggerSendEvent(lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_AFTER_DEATH_FOUND_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Init () {
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew = TriggerCreate("lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Func");
    TriggerAddEventGeneric(lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew, lib15EF4C78_gv_aP_Player_ON_PRIMARY_TOWN_HALL_DEATH_EVENT);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroPanelUpdate_Init () {
    lib15EF4C78_gt_CU_HeroPanelUpdate = TriggerCreate("lib15EF4C78_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_CU_HeroPanelUpdate, lib15EF4C78_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.25)) {
            lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 0.26;
            DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 0.5)) {
                lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 0.51;
                DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] <= 1.0)) {
                lib15EF4C78_gv_cU_VoidHeroUIDamageTimer[lv_index][0] = 1.01;
                DialogControlFadeTransparency(lib15EF4C78_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroUnitDamaged_Init () {
    lib15EF4C78_gt_CU_HeroUnitDamaged = TriggerCreate("lib15EF4C78_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_CU_HeroUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    int autoB3C5BA52_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoB3C5BA52_val = EventUnitProperty();
    if (autoB3C5BA52_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoB3C5BA52_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoB3C5BA52_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(lib15EF4C78_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroUnitVitalChange_Init () {
    lib15EF4C78_gt_CU_HeroUnitVitalChange = TriggerCreate("lib15EF4C78_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_cU_HeroUnit[0][0]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int autoFDC141E6_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    autoFDC141E6_val = EventDialogControlEventType();
    if (autoFDC141E6_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(lib15EF4C78_gv_cU_HeroUnit[0][0], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (autoFDC141E6_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(lib15EF4C78_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_CU_HeroMouseHoverText_Init () {
    lib15EF4C78_gt_CU_HeroMouseHoverText = TriggerCreate("lib15EF4C78_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(lib15EF4C78_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(lib15EF4C78_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib15EF4C78_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoE1889307_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1889307_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE1889307_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lib15EF4C78_gf_ZS_UpdateHeroPanel(lv_currentPlayer, 1);
        lib15EF4C78_gf_ZS_UpdateHeroPanel(lv_currentPlayer, 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_HeroPanelUpdate_Init () {
    lib15EF4C78_gt_ZS_HeroPanelUpdate = TriggerCreate("lib15EF4C78_gt_ZS_HeroPanelUpdate_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(lib15EF4C78_gt_ZS_HeroPanelUpdate, lib15EF4C78_gv_zS_SwarmHeroUIUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitDamaged
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == lib15EF4C78_gv_zS_SwarmHeroUIUnit[1])) {
        lv_index = 1;
    }
    else if ((EventUnit() == lib15EF4C78_gv_zS_SwarmHeroUIUnit[2])) {
        lv_index = 2;
    }
    else if (true) {
        return true;
    }
    lib15EF4C78_gv_zS_SwarmHeroUIDamage += EventUnitDamageAmount();
    lv_damage = FixedToInt(lib15EF4C78_gv_zS_SwarmHeroUIDamage);
    if ((lv_damage < 1)) {
        return true;
    }

    lib15EF4C78_gv_zS_SwarmHeroUIDamage = 0.0;
    DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), true);
    if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] > 0.0)) {
        DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
    }

    if ((lv_damage < 5)) {
        if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.25)) {
            lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.26;
            DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.25, 0.0);
            libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 0.5)) {
                lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 0.51;
                DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 0.5, 0.0);
                libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
        else {
            if ((lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] <= 1.0)) {
                lib15EF4C78_gv_zS_SwarmHeroUIDamageTimer[lv_index] = 1.01;
                DialogControlFadeTransparency(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenImage[lv_index], PlayerGroupAll(), 1.0, 0.0);
                libNtve_gf_SetDialogItemText(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], IntToText(lv_damage), PlayerGroupAll());
                DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogDamageTakenLabel[lv_index], PlayerGroupAll(), true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Init () {
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged = TriggerCreate("lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, false);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    unit auto6B7C2E37_val;
    int auto78DF5643_val;

    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B7C2E37_val = EventUnit();
    if (auto6B7C2E37_val == lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]) {
        lv_index = 1;
    }
    else if (auto6B7C2E37_val == lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]) {
        lv_index = 2;
    }
    else {
        return true;
    }
    auto78DF5643_val = EventUnitProperty();
    if (auto78DF5643_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyBarImage[lv_index], 1);
    }
    else if (auto78DF5643_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(lib15EF4C78_gv_zS_SwarmHeroUIPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropLifeMax, c_unitPropCurrent)) * 224.0));
        lv_damageBarWidth = MaxI(1, lv_damageBarWidth);
        lv_damageBarHeight = DialogControlGetHeight(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthBarImage[lv_index], 1);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 511, PlayerGroupAll());
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), lv_damageBarWidth, lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Init () {
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange = TriggerCreate("lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, false);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange, UnitRefFromVariable("lib15EF4C78_gv_zS_SwarmHeroUIUnit[2]"), c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ZS_SwarmHeroUIMouseHoverText
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_ZS_MouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto31F78A4F_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[1]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImage[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogBorderImageNoEnergy[2]) || (EventDialogControl() == lib15EF4C78_gv_zS_SwarmHeroUIDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto31F78A4F_val = EventDialogControlEventType();
    if (auto31F78A4F_val == c_triggerControlEventTypeMouseEnter) {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), true);
        if ((UnitGetPropertyFixed(lib15EF4C78_gv_zS_SwarmHeroUIUnit[lv_index], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), true);
        }

    }
    else if (auto31F78A4F_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogHealthLabel[lv_index], PlayerGroupAll(), false);
        DialogControlSetVisible(lib15EF4C78_gv_zS_SwarmHeroUIDialogEnergyLabel[lv_index], PlayerGroupAll(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_ZS_MouseHoverText_Init () {
    lib15EF4C78_gt_ZS_MouseHoverText = TriggerCreate("lib15EF4C78_gt_ZS_MouseHoverText_Func");
    TriggerEnable(lib15EF4C78_gt_ZS_MouseHoverText, false);
    TriggerAddEventDialogControl(lib15EF4C78_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(lib15EF4C78_gt_ZS_MouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib15EF4C78_gf_AP_Player_ZS_ReviveCooldownReadyKerriganController(lib15EF4C78_gv_zS_ReviveKerriganPlayerAsyncParam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Init () {
    lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner = TriggerCreate("lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AP_Player_ZS_KerriganDied
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    if (((UnitGetType(EventUnit()) == "AP_K5Kerrigan") || (UnitGetType(EventUnit()) == "AP_K5KerriganBurrowed") || (UnitGetType(EventUnit()) == "AP_K5KerriganPsiStrike"))) {
        UserDataSetInt("KerriganStates", "Alive", "Value", 1, 0);
        UserDataSetInt("KerriganStates", "Dead", "Value", 1, 1);
        if ((lib15EF4C78_gf_AP_Player_isKerriganRevivable(lv_player) == true)) {
            lib15EF4C78_gf_StartKerriganReviveCooldown(lv_player);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Init () {
    lib15EF4C78_gt_AP_Player_ZS_KerriganDied = TriggerCreate("lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Func");
    TriggerAddEventUnitDied(lib15EF4C78_gt_AP_Player_ZS_KerriganDied, null);
}

void lib15EF4C78_InitTriggers () {
    lib15EF4C78_gt_ArchipelagoPlayerHandlersConstructor_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Barracks_Init();
    lib15EF4C78_gt_ReactorswaptoBarracks_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Factory_Init();
    lib15EF4C78_gt_ReactorswaptoFactory_Init();
    lib15EF4C78_gt_ReactorswaptoAP_Starport_Init();
    lib15EF4C78_gt_ReactorswaptoStarport_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Barracks_Init();
    lib15EF4C78_gt_TechLabswaptoBarracks_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Factory_Init();
    lib15EF4C78_gt_TechLabswaptoFactory_Init();
    lib15EF4C78_gt_TechLabswaptoAP_Starport_Init();
    lib15EF4C78_gt_TechLabswaptoStarport_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Barracks_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Factory_Init();
    lib15EF4C78_gt_TechReactorswaptoAP_Starport_Init();
    lib15EF4C78_gt_AP_Player_setHolodecoyWeapon_Init();
    lib15EF4C78_gt_Set5SecondsMark_Init();
    lib15EF4C78_gt_ZerglingRespawnInit_Init();
    lib15EF4C78_gt_KerriganPsiStrike_Init();
    lib15EF4C78_gt_SlayerInit_Init();
    lib15EF4C78_gt_CreepTumorBuild_Init();
    lib15EF4C78_gt_AP_Player_FindPrimaryTownHallForAllPlayers_Init();
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathEmitEvent_Init();
    lib15EF4C78_gt_AP_Player_OnPrimaryTownHallDeathSeekNew_Init();
    lib15EF4C78_gt_CU_HeroPanelUpdate_Init();
    lib15EF4C78_gt_CU_HeroUnitDamaged_Init();
    lib15EF4C78_gt_CU_HeroUnitVitalChange_Init();
    lib15EF4C78_gt_CU_HeroMouseHoverText_Init();
    lib15EF4C78_gt_ZS_HeroPanelUpdate_Init();
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitDamaged_Init();
    lib15EF4C78_gt_ZS_SwarmHeroUIUnitVitalChange_Init();
    lib15EF4C78_gt_ZS_MouseHoverText_Init();
    lib15EF4C78_gt_AP_Player_ZS_ReviveCooldownReadyKerriganAsyncRunner_Init();
    lib15EF4C78_gt_AP_Player_ZS_KerriganDied_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib15EF4C78_InitLib_completed = false;

void lib15EF4C78_InitLib () {
    if (lib15EF4C78_InitLib_completed) {
        return;
    }

    lib15EF4C78_InitLib_completed = true;

    lib15EF4C78_InitLibraries();
    lib15EF4C78_InitVariables();
    lib15EF4C78_InitTriggers();
}

